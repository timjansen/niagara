/**
 * JavaScript task for Grunt that merges JavaScript files.
 * 
 * Syntax:
 * In input file, there can be statements 
 *    ///#include filename snippetname
 * To include a snippet from a file (relative to bath path).
 * 
 * Snippets in the input file can be removed using
 *    ///#remove
 *      .. block to remove ..
 *    ///#/remove
 *    
 * The included files must declare snippets like this:
 *    ///#snippet snippetname
 *     ... code to include ...
 *    ///#/snippet 
 */

var _ = require('minified-headless');
var mergetool = require('../helper/mergetool.js');
var fs = require('fs');

var DEFAULT_PROLOG = "\n\n// WARNING! This is an autogenerated file.\n\n\n"; 

module.exports = function(grunt) {
	grunt.registerMultiTask('mergesrc', 'Preprocessor to merge source files', function() {

		var options = this.options({
			srcDir : null,
			prolog : DEFAULT_PROLOG
		});
		
		this.files.forEach(function(f) {
			var srcPath = f.src[0];
			var destPath = f.dest;

			if (!srcPath) {
				grunt.log.error('No input file given.');
				return;
			}

			if (!grunt.file.exists(srcPath)) {
				grunt.log.error('Input file "' + srcPath + '" not found.');
				return;
			}

			var destTime = grunt.file.exists(destPath) ? fs.statSync(destPath).mtime.getTime() : 0; 
			var destUpToDate = true;
			_.each(f.src, function(srcFile) {
				if (fs.statSync(srcFile).mtime.getTime() > destTime)
					destUpToDate = false;
			});
			if (destUpToDate) {
				grunt.verbose.writeln("Destination up to date, nothing to do.");
				return;
			}

			var src = grunt.file.read(srcPath);
			var srcDir;
			
			if (options.srcDir)
				srcDir = options.srcDir;
			else
				srcDir = srcPath.replace(/[^\/\\]+$/, '');
						
			if (!grunt.file.exists(srcDir)) {
				grunt.log.error('Source file path "' + srcDir + '" not found. Something wrong with source?');
				return;
			}
			
			grunt.file.write(destPath, options.prolog + mergetool.merge(src, function(name) { return grunt.file.read(srcDir + name); } ));
		});
	});
};

