{
/*
   Auto-generated using docbuilder.js. Do not edit manually. 
*/
	title: `.toggle() - Minified.js`,
	section:"reference",
	externalCss: ["../css/reference.css"],
	main: `
<div id="docmain"><p class="docHead"><a href="index.html" class="backOverview">back to Overview</a></p>
<h2><a name="doc-toggle">.toggle()</a></h2>
<div class="summary">
Creates a function that switches between the two given states for the list.</div>

<div class="availability">Web module only.</div><h4>Syntax Variants</h4>
<div class="syntaxVariant">
<div class="syntax">list.toggle(cssClasses)</div>
<div class="syntax">list.toggle(state1, state2)</div>
<div class="syntax">list.toggle(state1, state2, durationMs)</div>
<div class="syntax">list.toggle(state1, state2, durationMs, linearity)</div>
<div class="syntax">list.toggle(state1, state2, durationMs, interpolationFunction)</div>
</div>

<h4>Parameters</h4>
<dl class="params">
<dt id="toggle_cssClasses" class=""><a name="toggle_cssClasses"><var>cssClasses</var></a></dt>
<dd class="">a string containing space-separated CSS class names to toggle. Classes are disabled in the first state
and enabled in the second.</dd>
<dt id="toggle_state1" class=""><a name="toggle_state1"><var>state1</var></a></dt>
<dd class="">a property map in <code><a href='set.html' class='func'>set()</a></code> syntax describing the initial state of the properties. The properties will automatically be set when the
<span class="var">toggle()</span> function is created. The properties will be set for all elements of the list.</dd>
<dt id="toggle_state2" class=""><a name="toggle_state2"><var>state2</var></a></dt>
<dd class="">a property map describing the second state of the properties. Uses <code><a href='set.html' class='func'>set()</a></code> syntax, like the other state.</dd>
<dt id="toggle_durationMs" class=""><a name="toggle_durationMs"><var>durationMs (optional)</var></a></dt>
<dd class="">if set, the duration of the animation in milliseconds. By default, there is no animation and the
properties will be changed immediately.</dd>
<dt id="toggle_linearity" class=""><a name="toggle_linearity"><var>linearity (optional)</var></a></dt>
<dd class="">defines whether the animation should be linear (1), very smooth (0) or something in between. Default: 0. Ignored if durationMs is 0.</dd>
<dt id="toggle_interpolationFunc" class=""><a name="toggle_interpolationFunc"><var>interpolationFunc (optional)</var></a></dt>
<dd class="">an interpolation <code>function(startValue, endValue, t)</code> for the animation which will be called every
time an interpolated value is required:
<dl>
<dt>startValue</dt><dd>The start value of the transition.</dd>
<dt>endValue</dt><dd>The end value of the transition.</dd>
<dt>t</dt><dd>A value between 0 and 1 that specifies the state of the transition.</dd>
<dt class="returnValue">(callback return value)</dt><dd>The value at the time <span class="var">t</span>.</dd>
</dl></dd>
<dt id="toggle_RETURN" class="returnValue inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4"><a name="toggle_RETURN"><var>(return value)</var></a></dt>
<dd class="inSyntax0 inSyntax1 inSyntax2 inSyntax3 inSyntax4">a toggle function <code>function(newState)</code> that will toggle between the two states, or set a specific state.
<dl>
<dt>newState (optional)</dt><dd>If a boolean <span class="var">true</span> or <span class="var">false</span> is given,
the toggle will set the first or second state respectively. If called with any other value, or without a value,
the function toggles to the other state.</dd>
</dl></dd>
</dl>

<h4>Description</h4>
<div class="description"><p>
Creates a function that switches between the two given states for the list. The states use the <code><a href='set.html' class='func'>set()</a></code> property syntax. You can also
just pass a string of CSS classes, as you do with <span class="var">set()</span>.</p><p>If no duration is given, the returned function changes the state immediately using <code><a href='set.html' class='func'>set()</a></code>. If a duration has been passed, the returned function
uses <code><a href='animate.html' class='func'>animate()</a></code> to smoothly transition the state. If the returned function is invoked while an animation is running, it interrupts the
animation and returns to the other state.</p><p>
</p></div>

<div class="examples">
<h4>Example</h4>
<div class="example"><p>Creates a toggle function that changes the background color of the page.
<pre>
var light = $('body').set({$backgroundColor: #000}, {$backgroundColor: #fff});
light();      // toggles state to second state
light(false); // sets first state (background color to #000).
light(true);  // sets second state (background color to #fff).
light();      // toggles state to first state
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Takes the previous function, but adds it as an onclick event handler that toggles the color.
<pre>
var light = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff});
$('#mySwitch').on('click', light);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Using an animated transition by passing a duration:
<pre>
var dimmer = $('body').toggle({$backgroundColor: #000}, {$backgroundColor: #fff}, 500);
$('#mySwitch').on('click', dimmer);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>Toggling CSS classes using the full syntax:
<pre>
var t = $('#myElement').toggle({$: '-myClass1 -myClass2'}, {$: '+myClass1 +myClass2'});
$('#myController').on('click', t);
</pre>
</p></div>
<h4>Example</h4>
<div class="example"><p>There is a shortcut for toggling CSS classes. Just list them space-separated in a string:
<pre>
var t = $('#myElement').toggle('myClass1 myClass2');
</pre>
</p></div>
</div>

<h4>See also..</h4>
<ul><li><code><a href='dial.html' class='func'>dial()</a></code> is a similar function that allows you to smoothly interpolate between two states.</li>
</ul>
<h4>Comments</h4>
 <div id="disqus_thread"></div>
<script type="text/javascript">
var disqus_shortname = "minifiedjs";
var disqus_identifier = "api-toggle";
var disqus_url = "http://minifiedjs.com/api/toggle.html";
(function() {
 var dsq = document.createElement("script"); dsq.type = "text/javascript"; dsq.async = true;
 dsq.src = "//" + disqus_shortname + ".disqus.com/embed.js";
(document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]).appendChild(dsq);
})();
</script>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

<p class="docFoot"><a href="index.html" class="backOverview">back to Overview</a></p>
</div>
<div id="toc"><h3>Functions</h3><ul><li><a href="dollar.html" class="func">$()</a> <span class="tocMod">Web</span>
</li><li><a href="length.html" class="func">list.length</a> <span class="tocMod">Web, Util</span>
</li><li><a href="dollardollar.html" class="func">$$()</a> <span class="tocMod">Web</span>
</li><li><a href="defer.html" class="func">$.defer()</a> 
</li><li><a href="delay.html" class="func">$.delay()</a> 
</li><li><a href="getcookie.html" class="func">$.getCookie()</a> 
</li><li><a href="loop.html" class="func">$.loop()</a> <span class="tocMod">Web</span>
</li><li><a href="off.html" class="func">$.off()</a> <span class="tocMod">Web</span>
</li><li><a href="parsejson.html" class="func">$.parseJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="promise.html" class="func">$.promise()</a> 
</li><li><a href="ready.html" class="func">$.ready()</a> <span class="tocMod">Web</span>
</li><li><a href="request.html" class="func">$.request()</a> <span class="tocMod">Web</span>
</li><li><a href="setcookie.html" class="func">$.setCookie()</a> 
</li><li><a href="tojson.html" class="func">$.toJSON()</a> <span class="tocMod">Web</span>
</li><li><a href="wait.html" class="func">$.wait()</a> 
</li><li><a href="add.html" class="func">.add()</a> <span class="tocMod">Web</span>
</li><li><a href="addafter.html" class="func">.addAfter()</a> <span class="tocMod">Web</span>
</li><li><a href="addbefore.html" class="func">.addBefore()</a> <span class="tocMod">Web</span>
</li><li><a href="addfront.html" class="func">.addFront()</a> <span class="tocMod">Web</span>
</li><li><a href="animate.html" class="func">.animate()</a> <span class="tocMod">Web</span>
</li><li><a href="array.html" class="func">.array()</a> <span class="tocMod">Util</span>
</li><li><a href="call.html" class="func">.call()</a> <span class="tocMod">Util</span>
</li><li><a href="clone.html" class="func">.clone()</a> <span class="tocMod">Web</span>
</li><li><a href="collect.html" class="func">.collect()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="contains.html" class="func">.contains()</a> <span class="tocMod">Util</span>
</li><li><a href="dial.html" class="func">.dial()</a> <span class="tocMod">Web</span>
</li><li><a href="each.html" class="func">.each()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="endswith.html" class="func">.endsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="equals.html" class="func">.equals()</a> <span class="tocMod">Util</span>
</li><li><a href="fill.html" class="func">.fill()</a> <span class="tocMod">Web</span>
</li><li><a href="filter.html" class="func">.filter()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="find.html" class="func">.find()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="findlast.html" class="func">.findLast()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="get.html" class="func">.get()</a> <span class="tocMod">Web</span>
</li><li><a href="ht.html" class="func">.ht()</a> 
</li><li><a href="intersection.html" class="func">.intersection()</a> <span class="tocMod">Util</span>
</li><li><a href="is.html" class="func">.is()</a> <span class="tocMod">Web</span>
</li><li><a href="join.html" class="func">.join()</a> <span class="tocMod">Util</span>
</li><li><a href="map.html" class="func">.map()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="offset.html" class="func">.offset()</a> 
</li><li><a href="on.html" class="func">.on()</a> <span class="tocMod">Web</span>
</li><li><a href="onchange.html" class="func">.onChange()</a> <span class="tocMod">Web</span>
</li><li><a href="onfocus.html" class="func">.onFocus()</a> <span class="tocMod">Web</span>
</li><li><a href="onover.html" class="func">.onOver()</a> <span class="tocMod">Web</span>
</li><li><a href="only.html" class="func">.only()</a> <span class="tocMod"></span>
</li><li><a href="per.html" class="func">.per()</a> <span class="tocMod">Util</span>
</li><li><a href="reduce.html" class="func">.reduce()</a> <span class="tocMod">Util</span>
</li><li><a href="remove.html" class="func">.remove()</a> <span class="tocMod">Web</span>
</li><li><a href="replace.html" class="func">.replace()</a> <span class="tocMod">Web</span>
</li><li><a href="reverse.html" class="func">.reverse()</a> <span class="tocMod">Util</span>
</li><li><a href="select.html" class="func">.select()</a> <span class="tocMod">Web</span>
</li><li><a href="set.html" class="func">.set()</a> <span class="tocMod">Web</span>
</li><li><a href="sort.html" class="func">.sort()</a> <span class="tocMod">Util</span>
</li><li><a href="startswith.html" class="func">.startsWith()</a> <span class="tocMod">Util</span>
</li><li><a href="sub.html" class="func">.sub()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="text.html" class="func">.text()</a> <span class="tocMod">Web</span>
</li><li><a href="toobject.html" class="func">.toObject()</a> <span class="tocMod">Util</span>
</li><li><a href="toggle.html" class="func">.toggle()</a> <span class="tocMod">Web</span>
</li><li><a href="trav.html" class="func">.trav()</a> <span class="tocMod">Web</span>
</li><li><a href="trigger.html" class="func">.trigger()</a> <span class="tocMod">Web</span>
</li><li><a href="uniq.html" class="func">.uniq()</a> <span class="tocMod">Util</span>
</li><li><a href="unite.html" class="func">.unite()</a> <span class="tocMod">Util</span>
</li><li><a href="values.html" class="func">.values()</a> <span class="tocMod">Web</span>
</li><li><a href="ee.html" class="func">EE()</a> <span class="tocMod">Web</span>
</li><li><a href="html.html" class="func">HTML()</a> <span class="tocMod">Web</span>
</li><li><a href="M.html" class="func">M</a> <span class="tocMod">Web, Util</span>
</li><li><a href="underscore.html" class="func">_()</a> <span class="tocMod">Util</span>
</li><li><a href="bind.html" class="func">_.bind()</a> <span class="tocMod">Util</span>
</li><li><a href="copyobj.html" class="func">_.copyObj()</a> <span class="tocMod">Util</span>
</li><li><a href="dateadd.html" class="func">_.dateAdd()</a> <span class="tocMod">Util</span>
</li><li><a href="dateclone.html" class="func">_.dateClone()</a> <span class="tocMod">Util</span>
</li><li><a href="datediff.html" class="func">_.dateDiff()</a> <span class="tocMod">Util</span>
</li><li><a href="datemidnight.html" class="func">_.dateMidnight()</a> <span class="tocMod">Util</span>
</li><li><a href="eachobj.html" class="func">_.eachObj()</a> <span class="tocMod">Util</span>
</li><li><a href="escapehtml.html" class="func">_.escapeHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="escaperegexp.html" class="func">_.escapeRegExp()</a> <span class="tocMod">Util</span>
</li><li><a href="extend.html" class="func">_.extend()</a> <span class="tocMod">Util</span>
</li><li><a href="filterobj.html" class="func">_.filterObj()</a> <span class="tocMod">Util</span>
</li><li><a href="format.html" class="func">_.format()</a> <span class="tocMod">Util</span>
</li><li><a href="formathtml.html" class="func">_.formatHtml()</a> <span class="tocMod">Util</span>
</li><li><a href="formatvalue.html" class="func">_.formatValue()</a> <span class="tocMod">Util</span>
</li><li><a href="isbool.html" class="func">_.isBool()</a> <span class="tocMod">Util</span>
</li><li><a href="isdate.html" class="func">_.isDate()</a> <span class="tocMod">Util</span>
</li><li><a href="isfunction.html" class="func">_.isFunction()</a> <span class="tocMod">Util</span>
</li><li><a href="islist.html" class="func">_.isList()</a> <span class="tocMod">Util</span>
</li><li><a href="isnumber.html" class="func">_.isNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="isobject.html" class="func">_.isObject()</a> <span class="tocMod">Util</span>
</li><li><a href="isstring.html" class="func">_.isString()</a> <span class="tocMod">Util</span>
</li><li><a href="isvalue.html" class="func">_.isValue()</a> <span class="tocMod">Util</span>
</li><li><a href="keys.html" class="func">_.keys()</a> <span class="tocMod">Util</span>
</li><li><a href="mapobj.html" class="func">_.mapObj()</a> <span class="tocMod">Util</span>
</li><li><a href="pad.html" class="func">_.pad()</a> <span class="tocMod">Util</span>
</li><li><a href="parsedate.html" class="func">_.parseDate()</a> <span class="tocMod">Util</span>
</li><li><a href="parsenumber.html" class="func">_.parseNumber()</a> <span class="tocMod">Util</span>
</li><li><a href="partial.html" class="func">_.partial()</a> <span class="tocMod">Util</span>
</li><li><a href="range.html" class="func">_.range()</a> <span class="tocMod"></span>
</li><li><a href="template.html" class="func">_.template()</a> <span class="tocMod">Util</span>
</li><li><a href="tostring.html" class="func">_.toString()</a> <span class="tocMod">Util</span>
</li><li><a href="trim.html" class="func">_.trim()</a> <span class="tocMod">Util</span>
</li><li><a href="objvalues.html" class="func">_.values()</a> <span class="tocMod">Util</span>
</li><li><a href="always.html" class="func">promise.always()</a> 
</li><li><a href="error.html" class="func">promise.error()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="state.html" class="func">promise.state</a> <span class="tocMod">Web, Util</span>
</li><li><a href="then.html" class="func">promise.then()</a> <span class="tocMod">Web, Util</span>
</li><li><a href="/docs/howto.html" class="func">How to...</a></li></ul></div>

`
}
